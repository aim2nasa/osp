//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: TempControlDcps.cpp
//  Source: TempControlDcps.idl
//  Generated: Fri Jun  8 13:38:58 2018
//  OpenSplice 6.7.180404OSS
//  
//******************************************************************

#include "TempControlDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < tutorial::TempSensorType, struct TempSensorTypeSeq_uniq_>;
#endif

const char * tutorial::TempSensorTypeTypeSupportInterface::_local_id = "IDL:tutorial/TempSensorTypeTypeSupportInterface:1.0";

tutorial::TempSensorTypeTypeSupportInterface_ptr tutorial::TempSensorTypeTypeSupportInterface::_duplicate (tutorial::TempSensorTypeTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean tutorial::TempSensorTypeTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, tutorial::TempSensorTypeTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

tutorial::TempSensorTypeTypeSupportInterface_ptr tutorial::TempSensorTypeTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   tutorial::TempSensorTypeTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (tutorial::TempSensorTypeTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < tutorial::TempSensorTypeTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

tutorial::TempSensorTypeTypeSupportInterface_ptr tutorial::TempSensorTypeTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   tutorial::TempSensorTypeTypeSupportInterface_ptr result;
   result = dynamic_cast < tutorial::TempSensorTypeTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * tutorial::TempSensorTypeDataWriter::_local_id = "IDL:tutorial/TempSensorTypeDataWriter:1.0";

tutorial::TempSensorTypeDataWriter_ptr tutorial::TempSensorTypeDataWriter::_duplicate (tutorial::TempSensorTypeDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean tutorial::TempSensorTypeDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, tutorial::TempSensorTypeDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

tutorial::TempSensorTypeDataWriter_ptr tutorial::TempSensorTypeDataWriter::_narrow (DDS::Object_ptr p)
{
   tutorial::TempSensorTypeDataWriter_ptr result = NULL;
   if (p && p->_is_a (tutorial::TempSensorTypeDataWriter::_local_id))
   {
      result = dynamic_cast < tutorial::TempSensorTypeDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

tutorial::TempSensorTypeDataWriter_ptr tutorial::TempSensorTypeDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   tutorial::TempSensorTypeDataWriter_ptr result;
   result = dynamic_cast < tutorial::TempSensorTypeDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * tutorial::TempSensorTypeDataReader::_local_id = "IDL:tutorial/TempSensorTypeDataReader:1.0";

tutorial::TempSensorTypeDataReader_ptr tutorial::TempSensorTypeDataReader::_duplicate (tutorial::TempSensorTypeDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean tutorial::TempSensorTypeDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, tutorial::TempSensorTypeDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

tutorial::TempSensorTypeDataReader_ptr tutorial::TempSensorTypeDataReader::_narrow (DDS::Object_ptr p)
{
   tutorial::TempSensorTypeDataReader_ptr result = NULL;
   if (p && p->_is_a (tutorial::TempSensorTypeDataReader::_local_id))
   {
      result = dynamic_cast < tutorial::TempSensorTypeDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

tutorial::TempSensorTypeDataReader_ptr tutorial::TempSensorTypeDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   tutorial::TempSensorTypeDataReader_ptr result;
   result = dynamic_cast < tutorial::TempSensorTypeDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * tutorial::TempSensorTypeDataReaderView::_local_id = "IDL:tutorial/TempSensorTypeDataReaderView:1.0";

tutorial::TempSensorTypeDataReaderView_ptr tutorial::TempSensorTypeDataReaderView::_duplicate (tutorial::TempSensorTypeDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean tutorial::TempSensorTypeDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, tutorial::TempSensorTypeDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

tutorial::TempSensorTypeDataReaderView_ptr tutorial::TempSensorTypeDataReaderView::_narrow (DDS::Object_ptr p)
{
   tutorial::TempSensorTypeDataReaderView_ptr result = NULL;
   if (p && p->_is_a (tutorial::TempSensorTypeDataReaderView::_local_id))
   {
      result = dynamic_cast < tutorial::TempSensorTypeDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

tutorial::TempSensorTypeDataReaderView_ptr tutorial::TempSensorTypeDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   tutorial::TempSensorTypeDataReaderView_ptr result;
   result = dynamic_cast < tutorial::TempSensorTypeDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



