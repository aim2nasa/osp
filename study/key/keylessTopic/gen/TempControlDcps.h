//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: TempControlDcps.h
//  Source: TempControlDcps.idl
//  Generated: Fri Jun  8 15:07:10 2018
//  OpenSplice 6.7.180404OSS
//  
//******************************************************************
#ifndef _TEMPCONTROLDCPS_H_
#define _TEMPCONTROLDCPS_H_
#ifndef OPENSPLICE_ISOCXX_PSM
#define OPENSPLICE_ISOCXX_PSM
#endif

#include "sacpp_mapping.h"
#include "TempControl.h"
#include "dds_dcps.h"


namespace tutorial
{

   class TempSensorTypeTypeSupportInterface;

   typedef TempSensorTypeTypeSupportInterface * TempSensorTypeTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < TempSensorTypeTypeSupportInterface> TempSensorTypeTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < TempSensorTypeTypeSupportInterface> TempSensorTypeTypeSupportInterface_out;


   class TempSensorTypeDataWriter;

   typedef TempSensorTypeDataWriter * TempSensorTypeDataWriter_ptr;
   typedef DDS_DCPSInterface_var < TempSensorTypeDataWriter> TempSensorTypeDataWriter_var;
   typedef DDS_DCPSInterface_out < TempSensorTypeDataWriter> TempSensorTypeDataWriter_out;


   class TempSensorTypeDataReader;

   typedef TempSensorTypeDataReader * TempSensorTypeDataReader_ptr;
   typedef DDS_DCPSInterface_var < TempSensorTypeDataReader> TempSensorTypeDataReader_var;
   typedef DDS_DCPSInterface_out < TempSensorTypeDataReader> TempSensorTypeDataReader_out;


   class TempSensorTypeDataReaderView;

   typedef TempSensorTypeDataReaderView * TempSensorTypeDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < TempSensorTypeDataReaderView> TempSensorTypeDataReaderView_var;
   typedef DDS_DCPSInterface_out < TempSensorTypeDataReaderView> TempSensorTypeDataReaderView_out;

   struct TempSensorTypeSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < TempSensorType, struct TempSensorTypeSeq_uniq_> TempSensorTypeSeq;
   typedef DDS_DCPSSequence_var < TempSensorTypeSeq> TempSensorTypeSeq_var;
   typedef DDS_DCPSSequence_out < TempSensorTypeSeq> TempSensorTypeSeq_out;
   class TempSensorTypeTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef TempSensorTypeTypeSupportInterface_ptr _ptr_type;
      typedef TempSensorTypeTypeSupportInterface_var _var_type;

      static TempSensorTypeTypeSupportInterface_ptr _duplicate (TempSensorTypeTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TempSensorTypeTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static TempSensorTypeTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TempSensorTypeTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      TempSensorTypeTypeSupportInterface_ptr _this () { return this; }


   protected:
      TempSensorTypeTypeSupportInterface () {};
      ~TempSensorTypeTypeSupportInterface () {};
   private:
      TempSensorTypeTypeSupportInterface (const TempSensorTypeTypeSupportInterface &);
      TempSensorTypeTypeSupportInterface & operator = (const TempSensorTypeTypeSupportInterface &);
   };

   class TempSensorTypeDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef TempSensorTypeDataWriter_ptr _ptr_type;
      typedef TempSensorTypeDataWriter_var _var_type;

      static TempSensorTypeDataWriter_ptr _duplicate (TempSensorTypeDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TempSensorTypeDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static TempSensorTypeDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TempSensorTypeDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      TempSensorTypeDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const TempSensorType& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const TempSensorType& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const TempSensorType& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const TempSensorType& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const TempSensorType& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const TempSensorType& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const TempSensorType& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const TempSensorType& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const TempSensorType& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const TempSensorType& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (TempSensorType& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TempSensorType& instance_data) = 0;

   protected:
      TempSensorTypeDataWriter () {};
      ~TempSensorTypeDataWriter () {};
   private:
      TempSensorTypeDataWriter (const TempSensorTypeDataWriter &);
      TempSensorTypeDataWriter & operator = (const TempSensorTypeDataWriter &);
   };

   class TempSensorTypeDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef TempSensorTypeDataReader_ptr _ptr_type;
      typedef TempSensorTypeDataReader_var _var_type;

      static TempSensorTypeDataReader_ptr _duplicate (TempSensorTypeDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TempSensorTypeDataReader_ptr _narrow (DDS::Object_ptr obj);
      static TempSensorTypeDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TempSensorTypeDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      TempSensorTypeDataReader_ptr _this () { return this; }

      virtual DDS::Long read (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TempSensorType& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TempSensorType& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TempSensorType& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TempSensorType& instance) = 0;

   protected:
      TempSensorTypeDataReader () {};
      ~TempSensorTypeDataReader () {};
   private:
      TempSensorTypeDataReader (const TempSensorTypeDataReader &);
      TempSensorTypeDataReader & operator = (const TempSensorTypeDataReader &);
   };

   class TempSensorTypeDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef TempSensorTypeDataReaderView_ptr _ptr_type;
      typedef TempSensorTypeDataReaderView_var _var_type;

      static TempSensorTypeDataReaderView_ptr _duplicate (TempSensorTypeDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TempSensorTypeDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static TempSensorTypeDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TempSensorTypeDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      TempSensorTypeDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TempSensorType& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TempSensorType& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TempSensorTypeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TempSensorType& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TempSensorType& instance) = 0;

   protected:
      TempSensorTypeDataReaderView () {};
      ~TempSensorTypeDataReaderView () {};
   private:
      TempSensorTypeDataReaderView (const TempSensorTypeDataReaderView &);
      TempSensorTypeDataReaderView & operator = (const TempSensorTypeDataReaderView &);
   };

}




#endif
